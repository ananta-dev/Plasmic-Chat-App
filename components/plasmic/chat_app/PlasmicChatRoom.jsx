// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fvjeJAc2KXTwtdHurp6o8v
// Component: Z8_MciQ7hY
import * as React from "react";
import Head from "next/head";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Layout from "../../Layout"; // plasmic-import: ilwT19qNd1/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_chat_app.module.css"; // plasmic-import: fvjeJAc2KXTwtdHurp6o8v/projectcss
import sty from "./PlasmicChatRoom.module.css"; // plasmic-import: Z8_MciQ7hY/css

export const PlasmicChatRoom__VariantProps = new Array();

export const PlasmicChatRoom__ArgProps = new Array();

function PlasmicChatRoom__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              className={classNames("__wab_instance", sty.layout)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "layout"],
  freeBox: ["freeBox", "layout"],
  layout: ["layout"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChatRoom__ArgProps,
      internalVariantPropNames: PlasmicChatRoom__VariantProps
    });

    return PlasmicChatRoom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatRoom";
  } else {
    func.displayName = `PlasmicChatRoom.${nodeName}`;
  }
  return func;
}

export const PlasmicChatRoom = Object.assign(
  // Top-level PlasmicChatRoom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    layout: makeNodeComponent("layout"),
    // Metadata about props expected for PlasmicChatRoom
    internalVariantProps: PlasmicChatRoom__VariantProps,
    internalArgProps: PlasmicChatRoom__ArgProps
  }
);

export default PlasmicChatRoom;
/* prettier-ignore-end */
