// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fvjeJAc2KXTwtdHurp6o8v
// Component: WsIksv38QI
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: z8VugZWSJM/component
import TextInput from "../../TextInput"; // plasmic-import: A0Od_rnAuEc/component
import ChatList from "../../ChatList"; // plasmic-import: aTcSUSTpWN/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_chat_app.module.css"; // plasmic-import: fvjeJAc2KXTwtdHurp6o8v/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: WsIksv38QI/css
import LogoutSvgrepoComsvgIcon from "./icons/PlasmicIcon__LogoutSvgrepoComsvg"; // plasmic-import: YM0hHWtVyU/icon

export const PlasmicSidebar__VariantProps = new Array();

export const PlasmicSidebar__ArgProps = new Array("username");

function PlasmicSidebar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headerProfile"}
        data-plasmic-override={overrides.headerProfile}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerProfile)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1C3Os)}
          >
            <Avatar
              data-plasmic-name={"userAvatar"}
              data-plasmic-override={overrides.userAvatar}
              className={classNames("__wab_instance", sty.userAvatar)}
              isEmpty={true}
            />

            <div className={classNames(projectcss.all, sty.freeBox__x2Dpv)}>
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.username
              })}
            </div>
          </p.Stack>
        ) : null}

        <LogoutSvgrepoComsvgIcon
          data-plasmic-name={"logoutIcon"}
          data-plasmic-override={overrides.logoutIcon}
          className={classNames(projectcss.all, sty.logoutIcon)}
          role={"img"}
        />
      </p.Stack>

      <div
        data-plasmic-name={"searchInputWrapper"}
        data-plasmic-override={overrides.searchInputWrapper}
        className={classNames(projectcss.all, sty.searchInputWrapper)}
      >
        <TextInput
          data-plasmic-name={"searchRoomTextInput"}
          data-plasmic-override={overrides.searchRoomTextInput}
          className={classNames("__wab_instance", sty.searchRoomTextInput)}
          placeholder={"Search room by name..."}
        />
      </div>

      <div
        data-plasmic-name={"addNewRoomWrapper"}
        data-plasmic-override={overrides.addNewRoomWrapper}
        className={classNames(projectcss.all, sty.addNewRoomWrapper)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Add New Room"}
        </div>
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__wl7HE)}>
          <ChatList
            data-plasmic-name={"chatList"}
            data-plasmic-override={overrides.chatList}
            className={classNames("__wab_instance", sty.chatList)}
          />
        </div>
      ) : null}
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerProfile",
    "userAvatar",
    "logoutIcon",
    "searchInputWrapper",
    "searchRoomTextInput",
    "addNewRoomWrapper",
    "text",
    "chatList"
  ],

  headerProfile: ["headerProfile", "userAvatar", "logoutIcon"],
  userAvatar: ["userAvatar"],
  logoutIcon: ["logoutIcon"],
  searchInputWrapper: ["searchInputWrapper", "searchRoomTextInput"],
  searchRoomTextInput: ["searchRoomTextInput"],
  addNewRoomWrapper: ["addNewRoomWrapper", "text"],
  text: ["text"],
  chatList: ["chatList"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebar__ArgProps,
      internalVariantPropNames: PlasmicSidebar__VariantProps
    });

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerProfile: makeNodeComponent("headerProfile"),
    userAvatar: makeNodeComponent("userAvatar"),
    logoutIcon: makeNodeComponent("logoutIcon"),
    searchInputWrapper: makeNodeComponent("searchInputWrapper"),
    searchRoomTextInput: makeNodeComponent("searchRoomTextInput"),
    addNewRoomWrapper: makeNodeComponent("addNewRoomWrapper"),
    text: makeNodeComponent("text"),
    chatList: makeNodeComponent("chatList"),
    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
